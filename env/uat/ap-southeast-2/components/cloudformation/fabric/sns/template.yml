AWSTemplateFormatVersion: 2010-09-09
Description: SNS for environment

Parameters:
  Environment:
    Type: String
    Description: The environment to deploy to
    Default: dev
  SlackHook:
    Type: String
    Default: https://hooks.slack.com/services/
  SlackChannel:
    Type: String
    Default: devops-messages

Resources:
  Lambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.7"
      Timeout: 25
      Environment:
        Variables:
          slack_endpoint: !Ref SlackHook
          channel: !Ref SlackChannel
      Code: 
        ZipFile: |
          import os 
          from botocore.vendored import requests
          def lambda_handler(event, context):
            channel = os.environ['channel']
            WEBHOOK_URL = os.environ['slack_endpoint']

            sns = event['Records'][0]['Sns']
            subject = 'DevOps Message'
            message = sns['Message']
            payload = {
              'text': message,
              'channel': channel,
              'color': 'good',
              'username': subject
            }
          
            print('DEBUG:', payload)
            r = requests.post(WEBHOOK_URL, json=payload)
            return r.status_code

      

  LambdaInvokePermissionErrors: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref DevOpsNotifications
      FunctionName: !GetAtt Lambda.Arn

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      Path: "/"
      Policies: 
      - PolicyName: "CloudwatchLogs"
        PolicyDocument:
          Statement: 
          - Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:GetLogEvents"
            - "logs:PutLogEvents"
            Resource:
            - "arn:aws:logs:*:*:*"
            Effect: "Allow"
      AssumeRolePolicyDocument: 
        Statement: 
        - Action: 
          - "sts:AssumeRole" 
          Effect: "Allow"
          Principal:
            Service: 
            - "lambda.amazonaws.com"
  
  DevOpsNotifications:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Sub ${Environment}-DevOpsNotifications
      Subscription: 
      - Endpoint: !GetAtt Lambda.Arn
        Protocol: "lambda"

  DevOpsErrors:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Sub ${Environment}-DevOpsErrors
      Subscription: 
      - Endpoint: !GetAtt Lambda.Arn
        Protocol: "lambda"

  AlarmSnsArn:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Sub ${Environment}-AlarmSnsArn
      Subscription: 
      - Endpoint: !GetAtt Lambda.Arn
        Protocol: "lambda"
